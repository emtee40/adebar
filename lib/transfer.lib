##############################################################################
# Adebar Â© 2014-2023 by Itzchak Rehberg
# This is part of the Adebar project, see https://codeberg.org/izzy/Adebar
# Protected by the GPLv2
# ----------------------------------------------------------------------------
# library to push stuff to the device
##############################################################################


#
# Install APKs
installApk() {
  if [[ -n "${DUMMYDIR}" ]]; then
    log_warning "installApk cannot be run on dummy devices, skipping"
    return
  fi
  if [[ -z "${TRANSFER_DIR}" ]]; then
    log_error "installApk called without TRANSFER_DIR being set"
    return
  fi
  case "$1" in
    "install")
      local instOpts='' ;;
    "reinstall")
      local instOpts='-r' ;;
    *)
      oops "installApk" "${LINENO}" "installApk() called without parameter" 4
      return
      ;;
  esac
  local instDir="${TRANSFER_DIR}/${1}"
  local ret=""
  if [[ ! -d "${instDir}" ]]; then
    oops "installApk" "${LINENO}" "no directory for ${1} found, skipping." 4
    return
  fi
  doProgress "- Checking for packages to ${1}" 2
  for apk in ${instDir}/*.apk; do
    [[ "$apk" = "${instDir}/*.apk" ]] && continue # mask only means no files
    msg="$((adb ${ADBOPTS} install ${instOpts} "$apk") 2>&1)"
    if [[ "$msg" == *"INSTALL_FAILED"* ]]; then # Failure [INSTALL_FAILED_INVALID_APK] INSTALL_FAILED_ALREADY_EXISTS
      ret=${msg//\]/}
      ret=${ret##*[}
      ret=$(ansi_code "Failed: ${ret}" "red")
      doProgress "${msg}" 5
    else
      ret="Success"
      rm -f "$apk"
    fi
    doProgress "  + $(basename "$apk"): ${ret}" 3
  done
}


#
# Push files
pushFiles() {
  if [[ -n "${DUMMYDIR}" ]]; then
    log_warning "pushFiles cannot be run on dummy devices, skipping"
    return
  fi
  if [[ -z "${TRANSFER_DIR}" ]]; then
    log_error "pushFiles called without TRANSFER_DIR being set"
    return
  fi
  local src="${TRANSFER_DIR}/upload"
  local ret=""
  local msg=""
  if [[ ! -d "$src" ]]; then
    oops "pushFiles" "${LINENO}" "upload directory '${src}' does not exist, skipping." 4
    return
  fi
  doProgress "- Checking for files to push to the device" 2
  for name in $src/*; do
    [[ "$name" = "$src/*" ]] && continue # mask only means no files
    msg="$((adb ${ADBOPTS} push $name $(basename $name)) 2>&1)"
    if [[ $? -eq 0 ]]; then
      rm -rf "${name}"
      ret="Success"
    else
      echo -e $(ansi_code "$msg" "red")
      ret="Failed"
    fi
    doProgress "  + $(basename $name): ${ret}" 3
  done
}


#
# Special Transfer
specialTrans() {
  if [[ -n "${DUMMYDIR}" ]]; then
    log_warning "specialTrans cannot be run on dummy devices, skipping"
    return
  fi
  if [[ -z "${TRANSFER_DIR}" ]]; then
    log_error "specialTrans called without TRANSFER_DIR being set"
    return
  fi
  doProgress "- Checking special transfer directory" 2
  [[ ! -d "${TRANSFER_DIR}/special" || ! -f "${TRANSFER_DIR}/special/run" ]] && return    # nothing to do
  [[ ! -x "${TRANSFER_DIR}/special/run" ]] && {
    doProgress "! Found '${TRANSFER_DIR}/special/run', but it's not executable. Skipping." 2
    return
  }
  doProgress "  + Executing '${TRANSFER_DIR}/special/run'" 3
  ${TRANSFER_DIR}/special/run
  local rc=$?
  if [[ $rc -eq 0 ]]; then
    doProgress "  + '${TRANSFER_DIR}/special/run' terminated with return code $rc." 3
  else
    doProgress "$(ansi_code "  ! '${TRANSFER_DIR}/special/run' terminated with return code $rc." "red")" 2
  fi
}


#
# Main Loop
#
doTransfer() {
  if [[ -n "${DUMMYDIR}" ]]; then
    log_warning "we cannot transfer any files to dummy devices, skipping"
    return
  fi
  if [[ -z "${TRANSFER_DIR}" ]]; then
    oops "doTransfer" "${LINENO}" "doTransfer() called without TRANSFER_DIR being set" 4
    return
  fi
  doProgress "Dealing with transfers"
  if [[ ! -d "${TRANSFER_DIR}" ]]; then
    oops "doTransfer" "${LINENO}" "- TRANSFER_DIR '${TRANSFER_DIR}' does not exist, skipping transfers." 2
    return
  fi
  installApk install
  installApk reinstall
  pushFiles
  specialTrans
}
